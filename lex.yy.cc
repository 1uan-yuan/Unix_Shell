#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 21
#define YY_END_OF_BUFFER 22
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[297] =
    {   0,
        0,    0,    0,    0,   22,   20,    2,    1,   20,   20,
        9,   20,    4,    3,   20,   20,   20,   20,    5,   17,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   20,
       20,   20,    0,   16,   20,   20,   20,   10,    7,    6,
       20,   20,   20,   20,    0,   20,   20,   20,   18,   18,
       17,   18,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   20,
       20,   20,   16,   20,   20,   16,   20,   20,    0,   20,
       20,    0,   20,   15,    8,   20,   20,   20,   20,    0,
       20,   12,   12,   20,   20,   20,   12,   20,   20,   18,

       18,   20,   18,    0,   18,   18,   18,   18,   18,   20,
       18,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   12,   14,
       14,   14,   12,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   20,    0,   20,   20,   20,   20,
       15,   20,   20,   20,   15,   15,   15,   15,   15,   11,
       20,   19,   19,   19,   18,   18,   20,   18,    0,   18,
       18,   20,   18,   19,   19,   19,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   11,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,

       14,   14,   15,   15,   15,   15,   15,   15,   20,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   15,   15,
        0,   15,   15,   15,   15,   13,   19,   19,   19,   19,
       19,   19,   14,   14,   14,   14,   14,   13,   14,   14,
       14,   14,   14,   15,   15,   15,   20,   15,   15,   15,
       15,   15,   15,   14,   14,   14,   14,   14,   14,   14,
       15,   20,   20,   15,   15,    0,   14,   14,   14,   14,
       20,    0,   14,   20,   14,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,   10,    1,    1,   11,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
        1,   13,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,    1,    1,    1,   15,    1,    1,   16,    1,

       17,    1,    1,    1,   18,    1,    1,    1,    1,    1,
       19,    1,    1,   20,   21,   22,   23,    1,    1,   24,
        1,    1,   25,   26,   27,   28,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[29] =
    {   0,
        1,    2,    3,    4,    1,    1,    5,    1,    1,    6,
        1,    7,    7,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,    1,    1
    } ;

static const flex_int16_t yy_base[379] =
    {   0,
        0,    0,   28,    0,  206,  191, 3398, 3398,   55,   57,
     3398,   50, 3398,   59,   81,  104,   56,   59, 3398,  124,
      189,  149,   71,   61,  174,  197,   62,   70,  217,  188,
      242,  267,  194,  184,  292,  315,  340, 3398, 3398,  190,
      366,    0,  391,  414,  181,  439,   73,   76,  459,  185,
      479,  504,  180,  529,  554,  179,  579,  602,  627,  653,
        0,  678,  701,  726,   83,   86,  746,  766,  791,  816,
        0,    0, 3398,  841,    0,    0,    0,  864,  183,  889,
      914,  164,  940,   98, 3398,  966,    0,    0,  989,  175,
     1014,  175, 3398,    0,    0,    0,    0,   84,  100, 1034,

      175, 1054, 1079,    0, 1099,  174, 1124,    0,    0, 1149,
        0, 1174,    0,    0, 1199,    0,    0,    0, 1222, 1247,
     1272, 1298,  118, 1324,    0,    0, 1347, 1372,  169,    0,
        0,    0,    0,   99,  109, 1392, 1412, 1437, 1457, 1482,
        0,    0, 1507,    0, 1530,  173, 1555,    0,    0,    0,
      174, 1580,    0,    0, 1606,  135,  173, 1629, 1653,  164,
      112, 1673,    0, 1698, 1718,  167, 1738, 1763,    0,    0,
        0, 1788,    0, 1813,    0,    0, 1836, 1861,    0,    0,
        0, 1886,    0,    0, 1912,  141, 1935, 1959,  159,  119,
     1979, 2004, 2024, 2044, 2069,    0,    0, 2094,    0, 2119,

        0,    0,  121,    0,  147,    0,    0, 2144,  126, 2165,
        0,    0,    0,    0,    0, 2185,    0, 2210, 2235,    0,
        0,    0,  146,    0,    0, 2260,  143, 2281,    0,    0,
        0,    0, 2301, 2326, 2351,    0,    0, 2376, 2402, 2428,
      143, 2454,  144, 2480,  160,  154, 2501,    0,    0,    0,
        0,    0, 2526, 2552,  140, 2578,  134,  144, 2599,    0,
        0,    0,    0,  119,  109,    0, 2624,   85,    0,    0,
        0,   97,    0,    0, 2650,   67,    0,    0,    0,    0,
        0, 2676,    0, 2702,    0,   52, 2727,    0, 2753,    0,
     2778,   34, 2803,    0,    0, 3398, 2829, 2835, 2842, 2849,

     2856, 2863, 2869, 2876, 2883, 2890, 2897, 2904, 2911, 2918,
     2925, 2932, 2939, 2946, 2953, 2960, 2967, 2974, 2981, 2988,
     2995, 3002, 3009, 3016, 3023, 3030, 3037, 3044, 3051, 3058,
     3065, 3072, 3079, 3086, 3093, 3099, 3106, 3113, 3120, 3127,
     3134, 3141, 3148, 3155, 3162, 3168, 3175, 3182, 3189, 3196,
     3202, 3209, 3216, 3223, 3230, 3237, 3244, 3251, 3258, 3265,
     3272, 3279, 3286, 3293, 3300, 3307, 3314, 3321, 3328, 3335,
     3342, 3349, 3356, 3362, 3369, 3376, 3383, 3390
    } ;

static const flex_int16_t yy_def[379] =
    {   0,
      296,    1,  296,    3,  296,  297,  296,  296,  298,  297,
      296,  297,  296,  296,  299,  300,  297,  297,  296,  301,
      302,  303,  302,  302,  304,  305,  302,  302,  306,  297,
      307,  298,  308,  297,  309,  310,  311,  296,  296,  296,
      299,   41,  312,  313,  314,  315,  297,  297,  316,  317,
      318,  319,  302,  320,  303,  302,  321,  322,  323,  304,
       60,  324,  325,  326,  302,  302,  327,  328,  329,  307,
       70,   70,  296,  309,   74,   70,   74,  330,  331,  332,
      311,  333,  334,  335,  296,  312,   86,   86,  313,  314,
      315,  297,  296,   91,   91,   91,   70,  297,  297,  316,

      317,  336,  319,  337,  338,  339,  340,  103,  103,  341,
      103,  320,  112,  112,  321,  115,  112,  115,  342,  343,
      323,  344,  345,  324,  124,  124,  325,  326,  302,  128,
      128,  128,  112,  302,  302,  327,  346,  329,  347,  348,
      138,  138,  349,  138,  330,  331,  332,  147,  147,  147,
      350,  334,  152,  152,  351,  335,  350,  335,  351,  297,
      297,  352,  353,  354,  338,  339,  355,  340,  356,  168,
      168,  357,  168,  354,  174,  174,  342,  343,  178,  178,
      178,  344,  182,  182,  358,  345,  345,  358,  302,  302,
      359,  360,  347,  361,  348,  195,  195,  362,  195,  360,

      200,  200,  350,  159,  159,  159,  159,  363,  297,  352,
      353,  174,  174,  174,  174,  364,  365,  366,  366,  219,
      219,  188,  188,  188,  188,  367,  302,  359,  200,  200,
      200,  200,  368,  369,  369,  235,  235,  370,  371,  363,
      372,  370,  240,  371,  373,  297,  364,  365,  219,  219,
      219,  219,  374,  367,  254,  374,  187,  302,  368,  235,
      235,  235,  235,  242,  350,  244,  375,  244,  244,  244,
      159,  296,  240,  256,  376,  256,  256,  256,  188,  254,
      242,  375,  282,  377,  244,  296,  376,  287,  378,  256,
      377,  372,  378,  282,  287,    0,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296
    } ;

static const flex_int16_t yy_nxt[3427] =
    {   0,
        6,    7,    8,    7,    9,   10,   11,    6,    6,    6,
       12,   13,   14,   15,   16,    6,   17,    6,    6,    6,
       18,    6,    6,    6,    6,   19,    6,   20,   21,    7,
        8,    7,   22,   23,   11,   21,   21,   21,   24,   13,
       14,   25,   26,   21,   27,   21,   21,   21,   28,   21,
       21,   21,   21,   19,   21,   29,   33,   33,   33,   34,
      272,   33,   38,   31,   36,   39,   33,   33,   35,   31,
       31,   40,   31,   38,   54,   54,  292,   48,   58,   47,
       33,   37,   42,   54,   54,   65,   31,   42,   66,   31,
       98,  290,   42,   42,   43,   59,   54,   31,   99,   54,

      134,  157,  286,  158,  157,  160,   42,   45,  135,  285,
       45,  159,   54,   31,  203,   45,   45,   46,   30,  161,
      189,  157,   54,  187,  157,   31,  203,  209,  190,   45,
       50,  188,   54,   51,  227,   50,   50,   52,  157,   31,
      158,  157,  246,  281,  157,  238,  187,  157,  159,   50,
       33,   33,   33,   56,  188,   33,   54,   54,  186,  258,
       33,   33,   57,  157,  280,  158,  157,   31,  273,  272,
      253,  239,   54,  159,   33,   61,  169,   31,  203,  203,
       61,   93,   54,  169,  104,   61,   61,   62,   31,   93,
      151,   93,   54,   54,  104,   93,   85,   31,   73,   61,

       45,   31,   54,   45,   31,  296,  296,  296,   45,   45,
       64,   53,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,   45,   50,  296,  296,   68,  296,   50,   50,
       69,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,   50,   71,  296,  296,  296,  296,   71,  296,
      296,  296,  296,   71,   71,   72,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   71,   33,   33,
       33,   34,  296,   33,  296,  296,  296,  296,   33,   33,
       35,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,   33,   75,   33,   33,   76,  296,   75,  296,

      296,  296,  296,   75,   75,   77,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   75,   79,  296,
      296,   79,  296,   30,  296,  296,   79,   79,   80,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
       79,   82,   82,   82,  296,  296,   82,  296,  296,  296,
      296,   82,   82,   83,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,   82,   84,   42,  296,  296,
      296,  296,   42,  296,  296,  296,  296,   42,   42,   43,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   42,   87,  296,  296,  296,  296,   87,  296,  296,

      296,  296,   87,   87,   88,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,   87,   90,  296,  296,
       90,  296,  296,  296,  296,   90,   90,   91,   92,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,   90,
       71,  296,   90,  296,  296,   95,  296,  296,  296,  296,
       95,   95,   96,   97,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,   95,  101,  296,  296,  102,  296,
      101,  101,  103,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  101,  106,  296,  296,   30,  296,
      106,  106,  107,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  106,   71,  296,  296,  296,  296,
      109,  296,  296,  110,  296,  109,  109,  111,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  109,
      113,  296,  296,  296,  296,  113,  296,  296,  296,  296,
      113,  113,  114,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  113,   33,   33,   33,   56,  296,
       33,  296,  296,  296,  296,   33,   33,   57,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,   33,
      116,   33,   33,  117,  296,  116,  296,  296,  296,  296,
      116,  116,  118,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  116,   79,  296,  296,   79,  296,
       53,  296,  296,   79,   79,  120,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   79,   82,   82,
       82,  296,  296,   82,  296,  296,  296,  296,   82,   82,
      122,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,   82,  123,   61,  296,  296,  296,  296,   61,
      296,  296,  296,  296,   61,   61,   62,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,   61,  125,
      296,  296,  296,  296,  125,  296,  296,  296,  296,  125,
      125,  126,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  125,   90,  296,  296,   90,  296,  296,
      296,  296,   90,   90,  128,  129,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,   90,  113,  296,   90,
      296,  296,  131,  296,  296,  296,  296,  131,  131,  132,
      133,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  131,  101,  296,  296,  137,  296,  101,  101,  138,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  101,  106,  296,  296,   53,  296,  106,  106,  140,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  106,  113,  296,  296,  296,  296,  142,  296,  296,

      143,  296,  142,  142,  144,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  142,   71,  296,  296,
      296,  296,   71,  296,  296,  296,  296,   71,   71,   72,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   71,   75,   33,   33,   76,  296,   75,  296,  296,
      296,  296,   75,   75,   77,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,   75,  146,  296,  296,
      146,  296,   92,  296,  296,  146,  146,  147,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  146,
       71,  296,  146,  296,  296,  149,  296,   97,  296,  296,

      149,  149,  150,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  149,   82,   82,   82,  296,  296,
       82,  296,  296,  296,  296,   82,   82,   83,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,   82,
       84,  153,   82,   82,  296,  296,  153,  296,  296,  296,
      296,  153,  153,  154,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  153,  155,   87,  296,  296,
      296,  296,   87,  296,  296,  296,  296,   87,   87,   88,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   87,   90,  296,  296,   90,  296,  296,  296,  296,

       90,   90,   91,   92,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,   90,   71,  296,   90,  296,  296,
       95,  296,  296,  296,  296,   95,   95,   96,   97,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,   95,
      101,  296,  296,  102,  296,  101,  101,  103,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  101,
      163,  296,  296,   30,  296,  163,  163,  164,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  163,
       71,  296,  296,  296,  296,  109,  296,  296,  110,  296,
      109,  109,  111,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  109,  166,  296,  296,  167,  296,
      166,  166,  168,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  166,   71,  296,  296,  296,  296,
      171,  296,  296,  172,  296,  171,  171,  173,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  171,
       71,  296,  296,  296,  296,  175,  296,  296,   70,  296,
      175,  175,  176,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  175,  113,  296,  296,  296,  296,
      113,  296,  296,  296,  296,  113,  113,  114,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  113,

      116,   33,   33,  117,  296,  116,  296,  296,  296,  296,
      116,  116,  118,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  116,  146,  296,  296,  146,  296,
      129,  296,  296,  146,  146,  178,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  146,  113,  296,
      146,  296,  296,  180,  296,  133,  296,  296,  180,  180,
      181,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  180,   82,   82,   82,  296,  296,   82,  296,
      296,  296,  296,   82,   82,  122,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   82,  123,  183,

       82,   82,  296,  296,  183,  296,  296,  296,  296,  183,
      183,  184,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  183,  185,  125,  296,  296,  296,  296,
      125,  296,  296,  296,  296,  125,  125,  126,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  125,
       90,  296,  296,   90,  296,  296,  296,  296,   90,   90,
      128,  129,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,   90,  113,  296,   90,  296,  296,  131,  296,
      296,  296,  296,  131,  131,  132,  133,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  131,  101,  296,

      296,  137,  296,  101,  101,  138,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  101,  163,  296,
      296,   53,  296,  163,  163,  192,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  163,  113,  296,
      296,  296,  296,  142,  296,  296,  143,  296,  142,  142,
      144,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  142,  166,  296,  296,  194,  296,  166,  166,
      195,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  166,  113,  296,  296,  296,  296,  197,  296,
      296,  198,  296,  197,  197,  199,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  197,  113,  296,
      296,  296,  296,  201,  296,  296,  112,  296,  201,  201,
      202,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  201,  146,  296,  296,  146,  296,   92,  296,
      296,  146,  146,  147,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  146,   71,  296,  146,  296,
      296,  149,  296,   97,  296,  296,  149,  149,  150,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      149,  153,   82,   82,  296,  296,  153,  296,  296,  296,
      296,  153,  153,  154,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  153,  155,   71,  296,  157,
      296,  205,  206,  296,  296,  296,  296,   71,   71,  207,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   71,  157,  296,  158,  157,  296,  296,  296,  296,
      296,  296,  159,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  208,   71,  296,  157,  296,  205,  206,
      296,  296,  296,  296,   71,   71,  207,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,   71,  211,
      296,  296,   30,  296,  211,  211,  212,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  211,   71,

      296,  296,  296,  296,  214,  296,  296,   70,  296,  214,
      214,  215,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  214,  166,  296,  296,  167,  296,  166,
      166,  168,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  166,  217,  296,  296,   30,  296,  217,
      217,  218,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  217,   71,  296,  296,  296,  296,  171,
      296,  296,  172,  296,  171,  171,  173,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  171,   71,
      296,  296,  296,  296,  220,  296,  296,   70,  296,  220,

      220,  221,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  220,   71,  296,  296,  296,  296,  214,
      296,  296,   70,  296,  214,  214,  215,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  214,  146,
      296,  296,  146,  296,  129,  296,  296,  146,  146,  178,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  146,  113,  296,  146,  296,  296,  180,  296,  133,
      296,  296,  180,  180,  181,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  180,  183,   82,   82,
      296,  296,  183,  296,  296,  296,  296,  183,  183,  184,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  183,  185,  113,  296,  157,  296,  223,  224,  296,
      296,  296,  296,  113,  113,  225,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  113,  157,  296,
      187,  157,  296,  296,  296,  296,  296,  296,  188,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  226,
      113,  296,  157,  296,  223,  224,  296,  296,  296,  296,
      113,  113,  225,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  113,  211,  296,  296,   53,  296,
      211,  211,  229,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  211,  113,  296,  296,  296,  296,
      231,  296,  296,  112,  296,  231,  231,  232,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  231,
      166,  296,  296,  194,  296,  166,  166,  195,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  166,
      217,  296,  296,   53,  296,  217,  217,  234,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  217,
      113,  296,  296,  296,  296,  197,  296,  296,  198,  296,
      197,  197,  199,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  197,  113,  296,  296,  296,  296,

      236,  296,  296,  112,  296,  236,  236,  237,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  236,
      113,  296,  296,  296,  296,  231,  296,  296,  112,  296,
      231,  231,  232,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  231,  241,  241,  242,  296,  243,
      242,  296,  296,  296,  296,  241,  241,  244,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  241,
      245,  211,  296,  296,   30,  296,  211,  211,  212,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      211,  248,  296,  296,   30,  296,  248,  248,  249,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      248,   71,  296,  296,  296,  296,  251,  296,  296,   70,
      296,  251,  251,  252,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  251,   71,  296,  296,  296,
      296,  251,  296,  296,   70,  296,  251,  251,  252,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      251,  241,  241,  242,  296,  255,  242,  296,  296,  296,
      296,  241,  241,  256,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  241,  257,  211,  296,  296,
       53,  296,  211,  211,  229,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  211,  248,  296,  296,
       53,  296,  248,  248,  260,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  248,  113,  296,  296,
      296,  296,  262,  296,  296,  112,  296,  262,  262,  263,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  262,  113,  296,  296,  296,  296,  262,  296,  296,
      112,  296,  262,  262,  263,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  262,  241,  241,  296,
      296,  264,  296,  296,  296,  296,  296,  241,  241,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  241,  265,  267,  241,  242,  296,  268,  269,  296,
      296,  296,  296,  267,  267,  270,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  267,  271,  241,
      241,  242,  296,  243,  242,  296,  296,  296,  296,  241,
      241,  244,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  241,  245,  241,  241,  296,  296,  264,
      296,  296,  296,  296,  296,  241,  241,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  241,
      265,  267,  241,  242,  296,  268,  269,  296,  296,  296,
      296,  267,  267,  270,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  267,  271,  248,  296,  296,
       30,  296,  248,  248,  249,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  248,  275,  241,  242,
      296,  276,  277,  296,  296,  296,  296,  275,  275,  278,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  275,  279,  241,  241,  242,  296,  255,  242,  296,
      296,  296,  296,  241,  241,  256,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  241,  257,  275,
      241,  242,  296,  276,  277,  296,  296,  296,  296,  275,
      275,  278,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  275,  279,  248,  296,  296,   53,  296,
      248,  248,  260,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  248,  267,  241,  241,  296,  296,
      267,  296,  296,  296,  296,  267,  267,  283,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  267,
      284,  275,  241,  241,  296,  296,  275,  296,  296,  296,
      296,  275,  275,  288,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  275,  289,  267,  241,  241,
      296,  296,  267,  296,  296,  296,  296,  267,  267,  283,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  267,  284,   71,  296,  296,  296,  291,   71,  296,
      296,  296,  296,   71,   71,   72,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   71,  275,  241,
      241,  296,  296,  275,  296,  296,  296,  296,  275,  275,
      288,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  275,  289,  113,  296,  296,  296,  293,  113,
      296,  296,  296,  296,  113,  113,  114,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  113,   71,
      296,  296,  296,  296,   71,  296,  296,  296,  296,   71,
       71,   72,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  294,   71,  113,  296,  296,  296,  296,  113,
      296,  296,  296,  296,  113,  113,  114,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  295,  113,   30,
      296,  296,  296,  296,   30,   32,   32,   32,   32,   32,
       32,   32,   41,   41,  296,  296,   41,   41,   41,   44,
      296,  296,   44,   44,   44,   44,   49,  296,  296,  296,
       49,   49,   49,   53,  296,  296,  296,  296,   53,   55,
       55,   55,   55,   55,   55,   55,   60,   60,  296,  296,
       60,   60,   60,   63,  296,  296,   63,   63,   63,   63,
       67,  296,  296,  296,   67,   67,   67,   70,   70,  296,

      296,   70,   70,   70,   33,   33,   33,   33,   33,   33,
       33,   74,   74,   74,   74,   74,   74,   74,   78,  296,
      296,   78,   78,   78,   78,   81,   81,   81,   81,   81,
       81,   81,   86,   86,  296,  296,   86,   86,   86,   89,
      296,  296,   89,   89,   89,   89,   90,  296,  296,   90,
       90,   90,   90,   94,   94,  296,   94,   94,   94,   94,
      100,  296,  296,  296,  100,  100,  100,  101,  296,  296,
      296,  101,  101,  101,  105,  296,  296,  296,  105,  105,
      105,  108,  108,  296,  296,  108,  108,  108,  112,  112,
      296,  296,  112,  112,  112,  115,  115,  115,  115,  115,

      115,  115,  119,  296,  296,  119,  119,  119,  119,  121,
      121,  121,  121,  121,  121,  121,  124,  124,  296,  296,
      124,  124,  124,  127,  296,  296,  127,  127,  127,  127,
      130,  130,  296,  130,  130,  130,  130,  136,  296,  296,
      296,  136,  136,  136,  139,  296,  296,  296,  139,  139,
      139,  141,  141,  296,  296,  141,  141,  141,  145,  296,
      296,  145,  145,  145,  145,  146,  296,  296,  146,  146,
      146,  146,  148,  148,  296,  148,  148,  148,  148,   82,
       82,   82,   82,   82,   82,   82,  152,  152,  152,  152,
      152,  152,  152,  156,  296,  296,  156,  156,  156,  162,

      296,  296,  296,  162,  162,  162,  163,  296,  296,  296,
      163,  296,  163,  165,  296,  296,  296,  165,  165,  165,
      166,  296,  296,  296,  166,  166,  166,  170,  170,  296,
      296,  170,  170,  170,  174,  174,  296,  296,  174,  174,
      174,  177,  296,  296,  177,  177,  177,  177,  179,  179,
      296,  179,  179,  179,  179,  182,  182,  182,  182,  182,
      182,  182,  186,  296,  296,  186,  186,  186,  191,  296,
      296,  296,  191,  191,  191,  193,  296,  296,  296,  193,
      193,  193,  196,  196,  296,  296,  196,  196,  196,  200,
      200,  296,  296,  200,  200,  200,  157,  296,  296,  157,

      157,  157,  204,  204,  296,  204,  204,  204,  204,  210,
      296,  296,  296,  210,  210,  210,  211,  296,  296,  296,
      211,  296,  211,  213,  213,  296,  296,  213,  213,  213,
      216,  296,  296,  296,  216,  216,  216,  217,  296,  296,
      296,  217,  296,  217,  219,  219,  296,  296,  219,  219,
      219,  222,  222,  296,  222,  222,  222,  222,  228,  296,
      296,  296,  228,  228,  228,  230,  230,  296,  296,  230,
      230,  230,  233,  296,  296,  296,  233,  233,  233,  235,
      235,  296,  296,  235,  235,  235,  240,  240,  240,  240,
      240,  240,  240,  247,  296,  296,  296,  247,  247,  247,

      248,  296,  296,  296,  248,  296,  248,  250,  250,  296,
      296,  250,  250,  250,  254,  254,  254,  254,  254,  254,
      254,  259,  296,  296,  296,  259,  259,  259,  261,  261,
      296,  296,  261,  261,  261,  242,  242,  242,  242,  242,
      242,  242,  266,  266,  266,  266,  266,  266,  266,  241,
      241,  241,  241,  241,  241,  241,  156,  296,  296,  156,
      156,  156,  274,  274,  274,  274,  274,  274,  274,  282,
      282,  282,  282,  282,  282,  282,  287,  287,  287,  287,
      287,  287,  287,   70,   70,  296,  296,   70,   70,   70,
      112,  112,  296,  296,  112,  112,  112,    5,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296
    } ;

static const flex_int16_t yy_chk[3427] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    9,    9,    9,    9,
      292,    9,   12,   12,   10,   14,    9,    9,    9,   17,
       10,   14,   18,   24,   24,   27,  286,   18,   23,   17,
        9,   10,   15,   28,   23,   27,   47,   15,   28,   48,
       47,  276,   15,   15,   15,   23,   65,   98,   48,   66,

       65,   84,  272,   84,   84,   98,   15,   16,   66,  268,
       16,   84,  134,   99,  265,   16,   16,   16,   16,   99,
      134,  123,  135,  123,  123,  161,  203,  161,  135,   16,
       20,  123,  190,   20,  190,   20,   20,   20,  156,  209,
      156,  156,  209,  264,  186,  203,  186,  186,  156,   20,
       22,   22,   22,   22,  186,   22,  227,  258,  257,  227,
       22,   22,   22,  245,  255,  245,  245,  246,  243,  241,
      223,  205,  189,  245,   22,   25,  166,  160,  157,  151,
       25,  146,  129,  106,  101,   25,   25,   25,   92,   90,
       82,   79,   56,   53,   50,   45,   40,   34,   33,   25,

       26,   30,   21,   26,    6,    5,    0,    0,   26,   26,
       26,   26,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   26,   29,    0,    0,   29,    0,   29,   29,
       29,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,   31,    0,    0,    0,    0,   31,    0,
        0,    0,    0,   31,   31,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   31,   32,   32,
       32,   32,    0,   32,    0,    0,    0,    0,   32,   32,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   32,   35,   35,   35,   35,    0,   35,    0,

        0,    0,    0,   35,   35,   35,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   35,   36,    0,
        0,   36,    0,   36,    0,    0,   36,   36,   36,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       36,   37,   37,   37,    0,    0,   37,    0,    0,    0,
        0,   37,   37,   37,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   37,   37,   41,    0,    0,
        0,    0,   41,    0,    0,    0,    0,   41,   41,   41,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,   43,    0,    0,    0,    0,   43,    0,    0,

        0,    0,   43,   43,   43,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   43,   44,    0,    0,
       44,    0,    0,    0,    0,   44,   44,   44,   44,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
       46,    0,   46,    0,    0,   46,    0,    0,    0,    0,
       46,   46,   46,   46,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   46,   49,    0,    0,   49,    0,
       49,   49,   49,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   49,   51,    0,    0,   51,    0,
       51,   51,   51,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   51,   52,    0,    0,    0,    0,
       52,    0,    0,   52,    0,   52,   52,   52,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
       54,    0,    0,    0,    0,   54,    0,    0,    0,    0,
       54,   54,   54,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   54,   55,   55,   55,   55,    0,
       55,    0,    0,    0,    0,   55,   55,   55,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   55,
       57,   57,   57,   57,    0,   57,    0,    0,    0,    0,
       57,   57,   57,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   57,   58,    0,    0,   58,    0,
       58,    0,    0,   58,   58,   58,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   58,   59,   59,
       59,    0,    0,   59,    0,    0,    0,    0,   59,   59,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,   59,   60,    0,    0,    0,    0,   60,
        0,    0,    0,    0,   60,   60,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   60,   62,
        0,    0,    0,    0,   62,    0,    0,    0,    0,   62,
       62,   62,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   62,   63,    0,    0,   63,    0,    0,
        0,    0,   63,   63,   63,   63,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   63,   64,    0,   64,
        0,    0,   64,    0,    0,    0,    0,   64,   64,   64,
       64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   64,   67,    0,    0,   67,    0,   67,   67,   67,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   67,   68,    0,    0,   68,    0,   68,   68,   68,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   68,   69,    0,    0,    0,    0,   69,    0,    0,

       69,    0,   69,   69,   69,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,   70,    0,    0,
        0,    0,   70,    0,    0,    0,    0,   70,   70,   70,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   70,   74,   74,   74,   74,    0,   74,    0,    0,
        0,    0,   74,   74,   74,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   74,   78,    0,    0,
       78,    0,   78,    0,    0,   78,   78,   78,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   78,
       80,    0,   80,    0,    0,   80,    0,   80,    0,    0,

       80,   80,   80,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   80,   81,   81,   81,    0,    0,
       81,    0,    0,    0,    0,   81,   81,   81,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   81,
       81,   83,   83,   83,    0,    0,   83,    0,    0,    0,
        0,   83,   83,   83,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   83,   86,    0,    0,
        0,    0,   86,    0,    0,    0,    0,   86,   86,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,   89,    0,    0,   89,    0,    0,    0,    0,

       89,   89,   89,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   89,   91,    0,   91,    0,    0,
       91,    0,    0,    0,    0,   91,   91,   91,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
      100,    0,    0,  100,    0,  100,  100,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
      102,    0,    0,  102,    0,  102,  102,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
      103,    0,    0,    0,    0,  103,    0,    0,  103,    0,
      103,  103,  103,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  103,  105,    0,    0,  105,    0,
      105,  105,  105,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  105,  107,    0,    0,    0,    0,
      107,    0,    0,  107,    0,  107,  107,  107,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
      110,    0,    0,    0,    0,  110,    0,    0,  110,    0,
      110,  110,  110,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  110,  112,    0,    0,    0,    0,
      112,    0,    0,    0,    0,  112,  112,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  112,

      115,  115,  115,  115,    0,  115,    0,    0,    0,    0,
      115,  115,  115,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,  119,    0,    0,  119,    0,
      119,    0,    0,  119,  119,  119,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  119,  120,    0,
      120,    0,    0,  120,    0,  120,    0,    0,  120,  120,
      120,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  120,  121,  121,  121,    0,    0,  121,    0,
        0,    0,    0,  121,  121,  121,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  121,  121,  122,

      122,  122,    0,    0,  122,    0,    0,    0,    0,  122,
      122,  122,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  122,  122,  124,    0,    0,    0,    0,
      124,    0,    0,    0,    0,  124,  124,  124,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  124,
      127,    0,    0,  127,    0,    0,    0,    0,  127,  127,
      127,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  127,  128,    0,  128,    0,    0,  128,    0,
        0,    0,    0,  128,  128,  128,  128,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  128,  136,    0,

        0,  136,    0,  136,  136,  136,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  136,  137,    0,
        0,  137,    0,  137,  137,  137,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  137,  138,    0,
        0,    0,    0,  138,    0,    0,  138,    0,  138,  138,
      138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  138,  139,    0,    0,  139,    0,  139,  139,
      139,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  139,  140,    0,    0,    0,    0,  140,    0,
        0,  140,    0,  140,  140,  140,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  140,  143,    0,
        0,    0,    0,  143,    0,    0,  143,    0,  143,  143,
      143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  143,  145,    0,    0,  145,    0,  145,    0,
        0,  145,  145,  145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  145,  147,    0,  147,    0,
        0,  147,    0,  147,    0,    0,  147,  147,  147,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      147,  152,  152,  152,    0,    0,  152,    0,    0,    0,
        0,  152,  152,  152,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  152,  152,  155,    0,  155,
        0,  155,  155,    0,    0,    0,    0,  155,  155,  155,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,  158,    0,  158,  158,    0,    0,    0,    0,
        0,    0,  158,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  158,  159,    0,  159,    0,  159,  159,
        0,    0,    0,    0,  159,  159,  159,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  159,  162,
        0,    0,  162,    0,  162,  162,  162,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  162,  164,

        0,    0,    0,    0,  164,    0,    0,  164,    0,  164,
      164,  164,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  164,  165,    0,    0,  165,    0,  165,
      165,  165,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  165,  167,    0,    0,  167,    0,  167,
      167,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  167,  168,    0,    0,    0,    0,  168,
        0,    0,  168,    0,  168,  168,  168,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  168,  172,
        0,    0,    0,    0,  172,    0,    0,  172,    0,  172,

      172,  172,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  172,  174,    0,    0,    0,    0,  174,
        0,    0,  174,    0,  174,  174,  174,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  174,  177,
        0,    0,  177,    0,  177,    0,    0,  177,  177,  177,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  177,  178,    0,  178,    0,    0,  178,    0,  178,
        0,    0,  178,  178,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  178,  182,  182,  182,
        0,    0,  182,    0,    0,    0,    0,  182,  182,  182,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  182,  182,  185,    0,  185,    0,  185,  185,    0,
        0,    0,    0,  185,  185,  185,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  187,    0,
      187,  187,    0,    0,    0,    0,    0,    0,  187,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  187,
      188,    0,  188,    0,  188,  188,    0,    0,    0,    0,
      188,  188,  188,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  188,  191,    0,    0,  191,    0,
      191,  191,  191,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  191,  192,    0,    0,    0,    0,
      192,    0,    0,  192,    0,  192,  192,  192,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  192,
      193,    0,    0,  193,    0,  193,  193,  193,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  193,
      194,    0,    0,  194,    0,  194,  194,  194,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  194,
      195,    0,    0,    0,    0,  195,    0,    0,  195,    0,
      195,  195,  195,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  195,  198,    0,    0,    0,    0,

      198,    0,    0,  198,    0,  198,  198,  198,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  198,
      200,    0,    0,    0,    0,  200,    0,    0,  200,    0,
      200,  200,  200,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  200,  208,  208,  208,    0,  208,
      208,    0,    0,    0,    0,  208,  208,  208,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  208,
      208,  210,    0,    0,  210,    0,  210,  210,  210,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      210,  216,    0,    0,  216,    0,  216,  216,  216,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      216,  218,    0,    0,    0,    0,  218,    0,    0,  218,
        0,  218,  218,  218,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  218,  219,    0,    0,    0,
        0,  219,    0,    0,  219,    0,  219,  219,  219,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      219,  226,  226,  226,    0,  226,  226,    0,    0,    0,
        0,  226,  226,  226,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  226,  226,  228,    0,    0,
      228,    0,  228,  228,  228,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  228,  233,    0,    0,
      233,    0,  233,  233,  233,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  233,  234,    0,    0,
        0,    0,  234,    0,    0,  234,    0,  234,  234,  234,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  234,  235,    0,    0,    0,    0,  235,    0,    0,
      235,    0,  235,  235,  235,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  235,  238,  238,    0,
        0,  238,    0,    0,    0,    0,    0,  238,  238,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  238,  238,  239,  239,  239,    0,  239,  239,    0,
        0,    0,    0,  239,  239,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  239,  239,  240,
      240,  240,    0,  240,  240,    0,    0,    0,    0,  240,
      240,  240,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  240,  240,  242,  242,    0,    0,  242,
        0,    0,    0,    0,    0,  242,  242,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  242,
      242,  244,  244,  244,    0,  244,  244,    0,    0,    0,
        0,  244,  244,  244,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  244,  244,  247,    0,    0,
      247,    0,  247,  247,  247,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  247,  253,  253,  253,
        0,  253,  253,    0,    0,    0,    0,  253,  253,  253,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  253,  253,  254,  254,  254,    0,  254,  254,    0,
        0,    0,    0,  254,  254,  254,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  254,  254,  256,
      256,  256,    0,  256,  256,    0,    0,    0,    0,  256,
      256,  256,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  256,  256,  259,    0,    0,  259,    0,
      259,  259,  259,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  259,  267,  267,  267,    0,    0,
      267,    0,    0,    0,    0,  267,  267,  267,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  267,
      267,  275,  275,  275,    0,    0,  275,    0,    0,    0,
        0,  275,  275,  275,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  275,  275,  282,  282,  282,
        0,    0,  282,    0,    0,    0,    0,  282,  282,  282,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  282,  282,  284,    0,    0,    0,  284,  284,    0,
        0,    0,    0,  284,  284,  284,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  284,  287,  287,
      287,    0,    0,  287,    0,    0,    0,    0,  287,  287,
      287,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  287,  287,  289,    0,    0,    0,  289,  289,
        0,    0,    0,    0,  289,  289,  289,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  289,  291,
        0,    0,    0,    0,  291,    0,    0,    0,    0,  291,
      291,  291,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  291,  291,  293,    0,    0,    0,    0,  293,
        0,    0,    0,    0,  293,  293,  293,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  293,  293,  297,
        0,    0,    0,    0,  297,  298,  298,  298,  298,  298,
      298,  298,  299,  299,    0,    0,  299,  299,  299,  300,
        0,    0,  300,  300,  300,  300,  301,    0,    0,    0,
      301,  301,  301,  302,    0,    0,    0,    0,  302,  303,
      303,  303,  303,  303,  303,  303,  304,  304,    0,    0,
      304,  304,  304,  305,    0,    0,  305,  305,  305,  305,
      306,    0,    0,    0,  306,  306,  306,  307,  307,    0,

        0,  307,  307,  307,  308,  308,  308,  308,  308,  308,
      308,  309,  309,  309,  309,  309,  309,  309,  310,    0,
        0,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  311,  312,  312,    0,    0,  312,  312,  312,  313,
        0,    0,  313,  313,  313,  313,  314,    0,    0,  314,
      314,  314,  314,  315,  315,    0,  315,  315,  315,  315,
      316,    0,    0,    0,  316,  316,  316,  317,    0,    0,
        0,  317,  317,  317,  318,    0,    0,    0,  318,  318,
      318,  319,  319,    0,    0,  319,  319,  319,  320,  320,
        0,    0,  320,  320,  320,  321,  321,  321,  321,  321,

      321,  321,  322,    0,    0,  322,  322,  322,  322,  323,
      323,  323,  323,  323,  323,  323,  324,  324,    0,    0,
      324,  324,  324,  325,    0,    0,  325,  325,  325,  325,
      326,  326,    0,  326,  326,  326,  326,  327,    0,    0,
        0,  327,  327,  327,  328,    0,    0,    0,  328,  328,
      328,  329,  329,    0,    0,  329,  329,  329,  330,    0,
        0,  330,  330,  330,  330,  331,    0,    0,  331,  331,
      331,  331,  332,  332,    0,  332,  332,  332,  332,  333,
      333,  333,  333,  333,  333,  333,  334,  334,  334,  334,
      334,  334,  334,  335,    0,    0,  335,  335,  335,  336,

        0,    0,    0,  336,  336,  336,  337,    0,    0,    0,
      337,    0,  337,  338,    0,    0,    0,  338,  338,  338,
      339,    0,    0,    0,  339,  339,  339,  340,  340,    0,
        0,  340,  340,  340,  341,  341,    0,    0,  341,  341,
      341,  342,    0,    0,  342,  342,  342,  342,  343,  343,
        0,  343,  343,  343,  343,  344,  344,  344,  344,  344,
      344,  344,  345,    0,    0,  345,  345,  345,  346,    0,
        0,    0,  346,  346,  346,  347,    0,    0,    0,  347,
      347,  347,  348,  348,    0,    0,  348,  348,  348,  349,
      349,    0,    0,  349,  349,  349,  350,    0,    0,  350,

      350,  350,  351,  351,    0,  351,  351,  351,  351,  352,
        0,    0,    0,  352,  352,  352,  353,    0,    0,    0,
      353,    0,  353,  354,  354,    0,    0,  354,  354,  354,
      355,    0,    0,    0,  355,  355,  355,  356,    0,    0,
        0,  356,    0,  356,  357,  357,    0,    0,  357,  357,
      357,  358,  358,    0,  358,  358,  358,  358,  359,    0,
        0,    0,  359,  359,  359,  360,  360,    0,    0,  360,
      360,  360,  361,    0,    0,    0,  361,  361,  361,  362,
      362,    0,    0,  362,  362,  362,  363,  363,  363,  363,
      363,  363,  363,  364,    0,    0,    0,  364,  364,  364,

      365,    0,    0,    0,  365,    0,  365,  366,  366,    0,
        0,  366,  366,  366,  367,  367,  367,  367,  367,  367,
      367,  368,    0,    0,    0,  368,  368,  368,  369,  369,
        0,    0,  369,  369,  369,  370,  370,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  373,    0,    0,  373,
      373,  373,  374,  374,  374,  374,  374,  374,  374,  375,
      375,  375,  375,  375,  375,  375,  376,  376,  376,  376,
      376,  376,  376,  377,  377,    0,    0,  377,  377,  377,
      378,  378,    0,    0,  378,  378,  378,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[22] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
    0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include <algorithm>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <cstdlib>
#include <unistd.h>
#include <string>
#include <limits.h>
#include <stdlib.h>
#include <pwd.h>
#include <string.h>
#include "y.tab.hh"

extern int status;
extern int last_process;
extern std::string shell_path;
extern std::string last_simple_arg;

extern char * read_line();
int mygetc(FILE * f) {
  static char *p;
  char ch;

  if (!isatty(0)) {
  // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

std::string current_command;
std::vector<std::string> command_table;
int command_num;

static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

void run_source(char * yytext) {
  FILE * FILE_A;
  FILE_A = fopen(yytext, "r");
  // fprintf(stderr, "FILE NAME: %s\n", yytext);
  if (FILE_A != NULL) {
    bool flag = false;
    if (yyin == NULL) {
      flag = true;
    }
    yypush_buffer_state(yy_create_buffer(FILE_A, YY_BUF_SIZE));
    BEGIN(0);
    yyparse();
    yypop_buffer_state();
    if (flag) {
      yyrestart(stdin);
    }
  }
}

#line 1421 "lex.yy.cc"

#line 1423 "lex.yy.cc"

#define INITIAL 0
#define SOURCE_SC 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 90 "shell.l"


#line 1644 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 297 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3398 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 92 "shell.l"
{
  command_table.push_back(current_command);
  command_num++;
  current_command = "";
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 99 "shell.l"
{
  /* Discard spaces and tabs */
  std::string tmp = std::string(yytext);
  if (!strcmp(tmp.c_str(), " ")) {
    current_command += " ";
  }
  else {
    current_command += "\t";
  }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "shell.l"
{
  current_command += ">";
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 115 "shell.l"
{
  current_command += "<";
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "shell.l"
{
  current_command += "|";
  return PIPE;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 125 "shell.l"
{
  current_command += ">>";
  return GREATGREAT;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 130 "shell.l"
{
  current_command += ">&";
  return GREATAMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 135 "shell.l"
{
  current_command += ">>&";
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "shell.l"
{
  current_command += "&";
  return AMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 145 "shell.l"
{
  current_command += "2>";
  return TWOGREAT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "shell.l"
{
  return EXIT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 154 "shell.l"
{ // detected subshell
  // fprintf(stderr, "Entered subshell!");
  std::string sub_command = std::string(yytext);
  current_command += sub_command;
  if (sub_command[0] == '$') {
    // $(sub_command)
    sub_command = sub_command.substr(2, sub_command.size() - 3);
  }
  else {
    // `sub_command`
    sub_command = sub_command.substr(1, sub_command.size() - 2);
  }


  //    S  H  E  L  L
  //    |PIN[1]     |POUT[0]
  //    |           |  
  //    |command    |
  //    |exit       |output of command
  //    |           | 
  //    |PIN[0]     |POUT[1]
  //   S  U  B  S  H  E  L  L

  sub_command += "\nexit\n";
  // fprintf(stderr, "%s\n", sub_command.c_str());
  // fflush(stderr);
  
  // 1. Parent create two pipes
  int tmpin = dup(0); // save the default input
  int tmpout = dup(1); // save the default output
  int pin[2], pout[2];
  pipe(pin);
  pipe(pout);
  // redirect parent in and out to correct pipes

  // 4. Parent writes to pin[1]
  write(pin[1], sub_command.c_str(), sub_command.size());
  close(pin[1]);

  // 3. In child, redirect input from pin[0] and redirect output to pout[1]
  dup2(pin[0], 0);
  dup2(pout[1], 1);
  close(pin[0]);
  close(pout[1]);

  // 2. Parent create child process
  int ret;
  ret = fork();
  if (ret == 0) { // child process
    // 5. The child process runs the subshell
    execvp("/proc/self/exe", NULL);
    perror("The execv function went wrong!");
    exit(1);
  }
  else if (ret < 0) { // fork process went wrong
    perror("The fork process is wrong!");
    exit(0);
  }
  waitpid(ret, NULL, 0);

  dup2(tmpin, 0);
  dup2(tmpout, 1);
  close(tmpin);
  close(tmpout);
  // fprintf(stderr, "child finish\n");

  // 6. Parent read from pout[0]
  int max = 1024;
  char *buffer = (char *) malloc(max);
  int i = 0;
  while (read(pout[0], &buffer[i], 1) != 0) {
    // fprintf(stderr, "read %c\n", buffer[i]);
    // fflush(stderr);
    if (i == max) {
      max *= 2;
      buffer = (char *) realloc(buffer, max);
    }
    if(buffer[i] == '\n') {
      buffer[i] = ' ';
    }
    i++;
  }
  close(pout[0]);
  for(i = i - 1; i >=0 ; i--) {
    myunputc(buffer[i]);
  }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 242 "shell.l"
{
  BEGIN(SOURCE_SC);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 246 "shell.l"
{
  // code for source
  // fprintf(stderr, "Entered source!");
  current_command += std::string("source ") + std::string(yytext);
  run_source(yytext);
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 253 "shell.l"
{ // Environment variable expansion
  // fprintf(stderr, "Entered environ!");
  std::string tmp = std::string(yytext);
  current_command += tmp;
  std::string answer;
  for (int i = 0; i < tmp.length(); i++) {
    // fprintf(stdout, "tmp: %s\n", tmp);
    // Environment Variable Expansion special cases
    // List different cases
    if ((tmp[i] == '$') && (tmp[i + 1] == '{')) { // match the pattern of "${"
      int mark; // mark represents the place of "}"
      for (int j = i; j < tmp.length(); j++) {
        if (tmp[j] == '}') {
          mark = j;
          break;
        }
      }
      // the length of the string in ${ string }
      int length = mark - i - 2;
      std::string target = tmp.substr(i + 2, length);
      // fprintf(stderr, "mark: %d\n", mark);
      // fprintf(stderr, "length: %d\n", length);
      // fprintf(stderr, "i: %d\n", i);
      // fprintf(stderr, "target: %s\n", target.c_str());
      if (!strcmp(target.c_str(), "$")) { // The PID of the shell process
        pid_t pid = getpid(); // PASSED!
        // fprintf(stdout, "pid: %d\n", pid);
        target = std::to_string(pid);
        answer += target;
      }
      else if (!strcmp(target.c_str(), "?")) { // The return code of the last executed command (ignoring commands sent to the background)
        target = std::to_string(status); // 221??????????????????? 225???????????????
        // fprintf(stderr, "shell.l status: %d\n", status);
        answer += target;
      }
      else if (!strcmp(target.c_str(), "!")) { // PID of the last process run in the background
        target = std::to_string(last_process);
        answer += target;
      }
      else if (!strcmp(target.c_str(), "_")) { // The last argument in the fully expanded previous command
       // target = command_table[command_num - 1]; // need to release undirect!!!!!!!!!!!!!!!!!!!
       // int mark_greater;
       // if ((mark_greater = target.find('>')) != std::string::npos) {
       //   if (target[mark_greater - 1] == ' ') {
            // target contains " >"
       //     target = target.substr(0, mark_greater - 1);
       //   }
       // }
       target = last_simple_arg;
       answer += target;
      }
      else if (!strcmp(target.c_str(), "SHELL")) { // The path of your shell executable
        char * path = realpath(shell_path.c_str(), NULL);
        target = std::string(path);
        free(path);
        answer += target;
      }
      else {
        // fprintf(stderr, "answer1: %s\n", answer.c_str());
        // fprintf(stderr, "target: %s\n", target.c_str());
        // fprintf(stderr, "new answer: %s\n", std::string(getenv(target.c_str())).c_str());
        answer += std::string(getenv(target.c_str()));
        // fprintf(stderr, "answer2: %s\n", answer.c_str());
      }
      i = i + length + 2;
    }
    else {
      answer.push_back(tmp[i]);
    }
  }
  yylval.cpp_string = new std::string(answer);
  return WORD;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 327 "shell.l"
{
  /* Quotes */
  // fprintf(stderr, "Entered quotes!");
  std::string tmp = std::string(yytext);
  current_command += tmp;
  // fprintf(stderr, "old tmp: %s\n", tmp.c_str());
  int first_occurrence = tmp.find('"');
  // fprintf(stderr, "first occurrence: %d\n", first_occurrence);
  int last_occurrence = tmp.find_last_of('"');
  // fprintf(stderr, "last occurrence: %d\n", last_occurrence);
  int length = last_occurrence - first_occurrence - 1;
  tmp = tmp.substr(first_occurrence + 1, length);
  // fprintf(stderr, "new tmp: %s\n", tmp.c_str());
  yylval.cpp_string = new std::string(tmp);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 344 "shell.l"
{ // Tilde expansion: basic situation: ~ or ~/
  // fprintf(stderr, "Entered tilde expansion: basic!");
  std::string tmp = std::string(yytext);
  current_command += tmp;
  std::string home_directory;
  home_directory = getenv("HOME");
  if (!strcmp(home_directory.c_str(), "")) {
    home_directory = getpwuid(getuid())->pw_dir;
  }
  yylval.cpp_string = new std::string(home_directory);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 357 "shell.l"
{ // Tilde expansion: second situation: ~george  or  ~/george
  // fprintf(stderr, "Entered tilde expansion: second!");
  std::string tmp = std::string(yytext);
  current_command += tmp;
  std::string home_directory;
  if (tmp.at(1) == '/') { // ~/george
    tmp = tmp.substr(2, tmp.size() - 2);
  }
  else { // ~george
    tmp = tmp.substr(1, tmp.size() - 1);
  }
  home_directory = getpwnam(tmp.c_str())->pw_dir;
  yylval.cpp_string = new std::string(home_directory);
  return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 373 "shell.l"
{ // Tilede expansion: final situation: ~george/dir or ~/george/dir
  // fprintf(stderr, "Entered tilde expansion: third!");
  std::string tmp = std::string(yytext);
  current_command += tmp;
  std::string home_directory;
  std::string given_directory;
  int position;
  if (tmp.at(1) == '/') { // ~/george/dir
    tmp = tmp.substr(2);
  }
  else { // ~george/dir
    tmp = tmp.substr(1);
  }
  // tmp = george/dir
  position = tmp.find('/');
  given_directory = tmp.substr(position); // given_directory = /dir
  tmp = tmp.substr(0, tmp.size() - given_directory.size()); // tmp = george
  home_directory = getpwnam(tmp.c_str())->pw_dir;
  home_directory += given_directory;
  yylval.cpp_string = new std::string(home_directory);
  return WORD;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 396 "shell.l"
{
  // fprintf(stderr, "Entered word!");
  /* Assume that file names have only alpha chars */
  std::string tmp = std::string(yytext);
  // fprintf(stderr, "tmp: %s\n", tmp.c_str());
  current_command += tmp;
  for (int i = tmp.length() - 1; i >= 0; i--) {
    if (tmp[i] == '\\') {
      tmp.erase(i, 1);
      if ((i > 0) && (tmp[i - 1] == '\\')) {
        i--;
      }
    }
  }
  // fprintf(stderr, "tmp: %s\n", tmp.c_str());
  yylval.cpp_string = new std::string(tmp);
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 414 "shell.l"
ECHO;
	YY_BREAK
#line 2102 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SOURCE_SC):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 297 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 297 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 296);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 414 "shell.l"
